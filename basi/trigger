1)
//trigger azionato al momento della gestione da parte dell'autore di una proposta
CREATE OR REPLACE FUNCTION elaborazione_proposta()
RETURNS TRIGGER AS $$
DECLARE
    id_testo_corrente testo.id_testo%TYPE;
    id_testo2 testo.id_testo%TYPE;
    testo_frase frase.testo%TYPE;
	frasi_testo CURSOR FOR
        SELECT F.testo
        FROM frase AS F
        WHERE id_testo = NEW.id_testo
        ORDER BY F.ordine;
BEGIN 
    IF (NEW.stato = true) THEN
        SELECT V.id_testo INTO id_testo_corrente
        FROM versione_corrente AS V
        WHERE V.titolo = NEW.titolo;

        INSERT INTO Testo DEFAULT VALUES;

        SELECT MAX(id_testo) INTO id_testo2
        FROM testo;

        OPEN frasi_testo;

        LOOP
            FETCH frasi_testo INTO testo_frase;
            EXIT WHEN NOT FOUND;
            INSERT INTO frase(id_testo, testo)
            VALUES(id_testo2, testo_frase);
        END LOOP;

        CLOSE frasi_testo;

        UPDATE versione_corrente SET id_testo = id_testo2 WHERE titolo = NEW.titolo;
    END IF;
    RETURN NEW;
END;

$$ LANGUAGE PLPGSQL;

---------------------------------------------------
CREATE TRIGGER elaborazione_proposta
AFTER UPDATE ON versione_proposta
FOR EACH ROW
WHEN (old.elaborato=false AND new.elaborato=true)
BEGIN
EXECUTE FUNCTION elaborazione_proposta();
_______________________________________________________________________________________________________________________________________________

2)Quando viene creata una pagina viene creato il Testo e la versione Corrente ad essa associate
 
CREATE OR REPLACE FUNCTION crea_versione_corrente_Testo() -- Provato e va
RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO Testo DEFAULT VALUES;
    INSERT INTO Versione_Corrente (Data, Ora, Titolo, Id_Testo)
    VALUES (NEW.Data, NEW.Ora, NEW.Titolo, (SELECT Id_Testo FROM Testo ORDER BY Id_Testo DESC LIMIT 1));
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;
 
CREATE TRIGGER crea_versione_corrente_Testo_trigger
AFTER INSERT ON Pagina
FOR EACH ROW
EXECUTE FUNCTION crea_versione_corrente_Testo();
_______________________________________________________________________________________________________________________________________________

3)Prima di inserire una frase viene preso l'ordine massimo associato al id_Testo e viene incrementato di uno
 
CREATE OR REPLACE FUNCTION incrementa_ordine_Frase() -- provato e va
RETURNS TRIGGER AS $$
DECLARE
    max_ordine INT;
    num_righe INT;
BEGIN
    max_ordine := 0;
    num_righe  := 0;
SELECT COUNT(*) INTO num_righe
FROM Frase
WHERE Id_Testo = NEW.Id_Testo;
IF num_righe = 0 THEN
   NEW.Ordine := 1;
 
ELSE
        SELECT MAX(Ordine) INTO max_ordine
        FROM Frase
        WHERE Id_Testo = NEW.Id_Testo;
 
        NEW.Ordine := max_ordine + 1;
 
END IF;
 
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;
 
CREATE TRIGGER incrementa_ordine_Frase_trigger
BEFORE INSERT ON Frase
FOR EACH ROW
EXECUTE FUNCTION incrementa_ordine_Frase();
_______________________________________________________________________________________________________________________________________________

4)Alla modifica della versione corrente viene creata automaticamente la versione precedente ad essa associata
 
CREATE OR REPLACE FUNCTION crea_versione_precedente() --- provato e va
RETURNS TRIGGER AS $$
BEGIN
 
    INSERT INTO Versione_Precedente (Data, Ora, Titolo, Id_Testo)
    VALUES (OLD.Data, OLD.Ora, OLD.Titolo, OLD.Id_Testo);
 
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;
 
CREATE TRIGGER crea_versione_precedente_trigger
BEFORE UPDATE ON Versione_Corrente
FOR EACH ROW
WHEN (OLD.Id_Testo != NEW.Id_Testo)
EXECUTE FUNCTION crea_versione_precedente();
 
_______________________________________________________________________________________________________________________________________________

5) Alla Modifica dell'attributo elaborato che passa da false a true in Versione Proposta, verifico che tale versione sia la più recente
altrimenti lancio un eccezione.
 
CREATE OR REPLACE FUNCTION verifica_versione_recente()
RETURNS TRIGGER AS $$
BEGIN
 
        IF EXISTS (
            SELECT 1
            FROM Versione_Proposta vp
            WHERE vp.Titolo = NEW.Titolo AND (vp.Data < NEW.Data OR (vp.Data = NEW.Data AND vp.Ora < NEW.Ora)) AND vp.Elaborato = False)
         THEN
            RAISE EXCEPTION 'La versione selezionata non è la più recente';
            RETURN OLD;
        ELSE
            RETURN NEW;
        END IF;
END;
$$ LANGUAGE plpgsql;
 
CREATE TRIGGER verifica_versione_recente_trigger
BEFORE UPDATE ON Versione_Proposta
FOR EACH ROW
WHEN (OLD.Elaborato = false AND NEW.Elaborato = true)
EXECUTE FUNCTION verifica_versione_recente();

_____________________________________________________________________________________________________________________________________________

6)
CREATE OR REPLACE FUNCTION elimina_pagina()
RETURNS TRIGGER AS $$
BEGIN
    DELETE FROM pagina WHERE matricola_autore = OLD.matricola;
    DELETE FROM autore WHERE matricola = OLD.matricola;
    RETURN OLD;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER eliminazione_utente
BEFORE DELETE ON Utente
FOR EACH ROW
EXECUTE FUNCTION elimina_pagina();

